# coding: utf-8

"""
    Quubole API Sepcification

    Operations, requests and responses  # noqa: E501

    OpenAPI spec version: v2.0
    Contact: support@qubole.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from qpy.api_client import ApiClient


class V13Api(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_account(self, x_auth_token, user_agent, **kwargs):  # noqa: E501
        """create_account  # noqa: E501

        Create Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_account(x_auth_token, user_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_auth_token: X-AUTH-TOKEN (required)
        :param str user_agent: User-Agent (required)
        :param dict(str, object) request_body:
        :return: CreateAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_account_with_http_info(x_auth_token, user_agent, **kwargs)  # noqa: E501
        else:
            (data) = self.create_account_with_http_info(x_auth_token, user_agent, **kwargs)  # noqa: E501
            return data

    def create_account_with_http_info(self, x_auth_token, user_agent, **kwargs):  # noqa: E501
        """create_account  # noqa: E501

        Create Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_account_with_http_info(x_auth_token, user_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_auth_token: X-AUTH-TOKEN (required)
        :param str user_agent: User-Agent (required)
        :param dict(str, object) request_body:
        :return: CreateAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['x_auth_token', 'user_agent', 'request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'x_auth_token' is set
        if ('x_auth_token' not in local_var_params or
                local_var_params['x_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_auth_token` when calling `create_account`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in local_var_params or
                local_var_params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `create_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_auth_token' in local_var_params:
            header_params['X-AUTH-TOKEN'] = local_var_params['x_auth_token']  # noqa: E501
        if 'user_agent' in local_var_params:
            header_params['User-Agent'] = local_var_params['user_agent']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1.3/accounts/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateAccountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_account_0(self, x_auth_token, user_agent, **kwargs):  # noqa: E501
        """create_account_0  # noqa: E501

        Create Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_account_0(x_auth_token, user_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_auth_token: X-AUTH-TOKEN (required)
        :param str user_agent: User-Agent (required)
        :param dict(str, object) request_body:
        :return: CreateAccountResponse2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_account_0_with_http_info(x_auth_token, user_agent, **kwargs)  # noqa: E501
        else:
            (data) = self.create_account_0_with_http_info(x_auth_token, user_agent, **kwargs)  # noqa: E501
            return data

    def create_account_0_with_http_info(self, x_auth_token, user_agent, **kwargs):  # noqa: E501
        """create_account_0  # noqa: E501

        Create Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_account_0_with_http_info(x_auth_token, user_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_auth_token: X-AUTH-TOKEN (required)
        :param str user_agent: User-Agent (required)
        :param dict(str, object) request_body:
        :return: CreateAccountResponse2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['x_auth_token', 'user_agent', 'request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'x_auth_token' is set
        if ('x_auth_token' not in local_var_params or
                local_var_params['x_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_auth_token` when calling `create_account_0`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in local_var_params or
                local_var_params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `create_account_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_auth_token' in local_var_params:
            header_params['X-AUTH-TOKEN'] = local_var_params['x_auth_token']  # noqa: E501
        if 'user_agent' in local_var_params:
            header_params['User-Agent'] = local_var_params['user_agent']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1.3/accounts/users', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateAccountResponse2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_account_1(self, x_auth_token, user_agent, **kwargs):  # noqa: E501
        """create_account_1  # noqa: E501

        Create Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_account_1(x_auth_token, user_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_auth_token: X-AUTH-TOKEN (required)
        :param str user_agent: User-Agent (required)
        :param dict(str, object) request_body:
        :return: CreateAccountResponse2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_account_1_with_http_info(x_auth_token, user_agent, **kwargs)  # noqa: E501
        else:
            (data) = self.create_account_1_with_http_info(x_auth_token, user_agent, **kwargs)  # noqa: E501
            return data

    def create_account_1_with_http_info(self, x_auth_token, user_agent, **kwargs):  # noqa: E501
        """create_account_1  # noqa: E501

        Create Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_account_1_with_http_info(x_auth_token, user_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_auth_token: X-AUTH-TOKEN (required)
        :param str user_agent: User-Agent (required)
        :param dict(str, object) request_body:
        :return: CreateAccountResponse2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['x_auth_token', 'user_agent', 'request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account_1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'x_auth_token' is set
        if ('x_auth_token' not in local_var_params or
                local_var_params['x_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_auth_token` when calling `create_account_1`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in local_var_params or
                local_var_params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `create_account_1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_auth_token' in local_var_params:
            header_params['X-AUTH-TOKEN'] = local_var_params['x_auth_token']  # noqa: E501
        if 'user_agent' in local_var_params:
            header_params['User-Agent'] = local_var_params['user_agent']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1.3/accounts/users/123/customers/12', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateAccountResponse2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_cluster(self, x_auth_token, user_agent, **kwargs):  # noqa: E501
        """create_cluster  # noqa: E501

        Create Cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cluster(x_auth_token, user_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_auth_token: X-AUTH-TOKEN (required)
        :param str user_agent: User-Agent (required)
        :param dict(str, object) request_body:
        :return: CreateClusterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_cluster_with_http_info(x_auth_token, user_agent, **kwargs)  # noqa: E501
        else:
            (data) = self.create_cluster_with_http_info(x_auth_token, user_agent, **kwargs)  # noqa: E501
            return data

    def create_cluster_with_http_info(self, x_auth_token, user_agent, **kwargs):  # noqa: E501
        """create_cluster  # noqa: E501

        Create Cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cluster_with_http_info(x_auth_token, user_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_auth_token: X-AUTH-TOKEN (required)
        :param str user_agent: User-Agent (required)
        :param dict(str, object) request_body:
        :return: CreateClusterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['x_auth_token', 'user_agent', 'request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cluster" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'x_auth_token' is set
        if ('x_auth_token' not in local_var_params or
                local_var_params['x_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_auth_token` when calling `create_cluster`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in local_var_params or
                local_var_params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `create_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_auth_token' in local_var_params:
            header_params['X-AUTH-TOKEN'] = local_var_params['x_auth_token']  # noqa: E501
        if 'user_agent' in local_var_params:
            header_params['User-Agent'] = local_var_params['user_agent']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1.3/clusters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateClusterResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
