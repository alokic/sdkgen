# coding: utf-8

"""
    Quubole API Sepcification

    Operations, requests and responses  # noqa: E501

    OpenAPI spec version: v2.0
    Contact: support@qubole.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateClusterRequestNodeConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'custom_ec2_tags': 'str',
        'ebs_upscaling_config': 'CreateClusterRequestEbsUpscalingConfig',
        'ebs_volume_count': 'float',
        'ebs_volume_size': 'str',
        'ebs_volume_type': 'str',
        'fallback_to_ondemand': 'str',
        'heterogeneous_instance_config': 'CreateClusterRequestHeterogeneousInstanceConfig',
        'idle_cluster_timeout': 'float',
        'idle_cluster_timeout_in_secs': 'float',
        'initial_nodes': 'float',
        'master_instance_type': 'str',
        'max_nodes': 'float',
        'node_base_cooldown_period': 'float',
        'node_spot_cooldown_period': 'float',
        'slave_instance_type': 'str',
        'slave_request_type': 'str',
        'spot_block_settings': 'CreateClusterRequestSpotBlockSettings',
        'spot_instance_settings': 'CreateClusterRequestSpotInstanceSettings',
        'stable_spot_instance_settings': 'CreateClusterRequestStableSpotInstanceSettings'
    }

    attribute_map = {
        'custom_ec2_tags': 'custom_ec2_tags',
        'ebs_upscaling_config': 'ebs_upscaling_config',
        'ebs_volume_count': 'ebs_volume_count',
        'ebs_volume_size': 'ebs_volume_size',
        'ebs_volume_type': 'ebs_volume_type',
        'fallback_to_ondemand': 'fallback_to_ondemand',
        'heterogeneous_instance_config': 'heterogeneous_instance_config',
        'idle_cluster_timeout': 'idle_cluster_timeout',
        'idle_cluster_timeout_in_secs': 'idle_cluster_timeout_in_secs',
        'initial_nodes': 'initial_nodes',
        'master_instance_type': 'master_instance_type',
        'max_nodes': 'max_nodes',
        'node_base_cooldown_period': 'node_base_cooldown_period',
        'node_spot_cooldown_period': 'node_spot_cooldown_period',
        'slave_instance_type': 'slave_instance_type',
        'slave_request_type': 'slave_request_type',
        'spot_block_settings': 'spot_block_settings',
        'spot_instance_settings': 'spot_instance_settings',
        'stable_spot_instance_settings': 'stable_spot_instance_settings'
    }

    def __init__(self, custom_ec2_tags=None, ebs_upscaling_config=None, ebs_volume_count=None, ebs_volume_size=None, ebs_volume_type=None, fallback_to_ondemand=None, heterogeneous_instance_config=None, idle_cluster_timeout=None, idle_cluster_timeout_in_secs=None, initial_nodes=None, master_instance_type=None, max_nodes=None, node_base_cooldown_period=None, node_spot_cooldown_period=None, slave_instance_type=None, slave_request_type=None, spot_block_settings=None, spot_instance_settings=None, stable_spot_instance_settings=None):  # noqa: E501
        """CreateClusterRequestNodeConfiguration - a model defined in OpenAPI"""  # noqa: E501

        self._custom_ec2_tags = None
        self._ebs_upscaling_config = None
        self._ebs_volume_count = None
        self._ebs_volume_size = None
        self._ebs_volume_type = None
        self._fallback_to_ondemand = None
        self._heterogeneous_instance_config = None
        self._idle_cluster_timeout = None
        self._idle_cluster_timeout_in_secs = None
        self._initial_nodes = None
        self._master_instance_type = None
        self._max_nodes = None
        self._node_base_cooldown_period = None
        self._node_spot_cooldown_period = None
        self._slave_instance_type = None
        self._slave_request_type = None
        self._spot_block_settings = None
        self._spot_instance_settings = None
        self._stable_spot_instance_settings = None
        self.discriminator = None

        if custom_ec2_tags is not None:
            self.custom_ec2_tags = custom_ec2_tags
        if ebs_upscaling_config is not None:
            self.ebs_upscaling_config = ebs_upscaling_config
        if ebs_volume_count is not None:
            self.ebs_volume_count = ebs_volume_count
        if ebs_volume_size is not None:
            self.ebs_volume_size = ebs_volume_size
        if ebs_volume_type is not None:
            self.ebs_volume_type = ebs_volume_type
        if fallback_to_ondemand is not None:
            self.fallback_to_ondemand = fallback_to_ondemand
        if heterogeneous_instance_config is not None:
            self.heterogeneous_instance_config = heterogeneous_instance_config
        if idle_cluster_timeout is not None:
            self.idle_cluster_timeout = idle_cluster_timeout
        if idle_cluster_timeout_in_secs is not None:
            self.idle_cluster_timeout_in_secs = idle_cluster_timeout_in_secs
        if initial_nodes is not None:
            self.initial_nodes = initial_nodes
        if master_instance_type is not None:
            self.master_instance_type = master_instance_type
        if max_nodes is not None:
            self.max_nodes = max_nodes
        if node_base_cooldown_period is not None:
            self.node_base_cooldown_period = node_base_cooldown_period
        if node_spot_cooldown_period is not None:
            self.node_spot_cooldown_period = node_spot_cooldown_period
        if slave_instance_type is not None:
            self.slave_instance_type = slave_instance_type
        if slave_request_type is not None:
            self.slave_request_type = slave_request_type
        if spot_block_settings is not None:
            self.spot_block_settings = spot_block_settings
        if spot_instance_settings is not None:
            self.spot_instance_settings = spot_instance_settings
        if stable_spot_instance_settings is not None:
            self.stable_spot_instance_settings = stable_spot_instance_settings

    @property
    def custom_ec2_tags(self):
        """Gets the custom_ec2_tags of this CreateClusterRequestNodeConfiguration.  # noqa: E501


        :return: The custom_ec2_tags of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._custom_ec2_tags

    @custom_ec2_tags.setter
    def custom_ec2_tags(self, custom_ec2_tags):
        """Sets the custom_ec2_tags of this CreateClusterRequestNodeConfiguration.


        :param custom_ec2_tags: The custom_ec2_tags of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :type: str
        """

        self._custom_ec2_tags = custom_ec2_tags

    @property
    def ebs_upscaling_config(self):
        """Gets the ebs_upscaling_config of this CreateClusterRequestNodeConfiguration.  # noqa: E501


        :return: The ebs_upscaling_config of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :rtype: CreateClusterRequestEbsUpscalingConfig
        """
        return self._ebs_upscaling_config

    @ebs_upscaling_config.setter
    def ebs_upscaling_config(self, ebs_upscaling_config):
        """Sets the ebs_upscaling_config of this CreateClusterRequestNodeConfiguration.


        :param ebs_upscaling_config: The ebs_upscaling_config of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :type: CreateClusterRequestEbsUpscalingConfig
        """

        self._ebs_upscaling_config = ebs_upscaling_config

    @property
    def ebs_volume_count(self):
        """Gets the ebs_volume_count of this CreateClusterRequestNodeConfiguration.  # noqa: E501


        :return: The ebs_volume_count of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._ebs_volume_count

    @ebs_volume_count.setter
    def ebs_volume_count(self, ebs_volume_count):
        """Sets the ebs_volume_count of this CreateClusterRequestNodeConfiguration.


        :param ebs_volume_count: The ebs_volume_count of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :type: float
        """

        self._ebs_volume_count = ebs_volume_count

    @property
    def ebs_volume_size(self):
        """Gets the ebs_volume_size of this CreateClusterRequestNodeConfiguration.  # noqa: E501


        :return: The ebs_volume_size of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ebs_volume_size

    @ebs_volume_size.setter
    def ebs_volume_size(self, ebs_volume_size):
        """Sets the ebs_volume_size of this CreateClusterRequestNodeConfiguration.


        :param ebs_volume_size: The ebs_volume_size of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :type: str
        """

        self._ebs_volume_size = ebs_volume_size

    @property
    def ebs_volume_type(self):
        """Gets the ebs_volume_type of this CreateClusterRequestNodeConfiguration.  # noqa: E501


        :return: The ebs_volume_type of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ebs_volume_type

    @ebs_volume_type.setter
    def ebs_volume_type(self, ebs_volume_type):
        """Sets the ebs_volume_type of this CreateClusterRequestNodeConfiguration.


        :param ebs_volume_type: The ebs_volume_type of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :type: str
        """

        self._ebs_volume_type = ebs_volume_type

    @property
    def fallback_to_ondemand(self):
        """Gets the fallback_to_ondemand of this CreateClusterRequestNodeConfiguration.  # noqa: E501


        :return: The fallback_to_ondemand of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._fallback_to_ondemand

    @fallback_to_ondemand.setter
    def fallback_to_ondemand(self, fallback_to_ondemand):
        """Sets the fallback_to_ondemand of this CreateClusterRequestNodeConfiguration.


        :param fallback_to_ondemand: The fallback_to_ondemand of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :type: str
        """

        self._fallback_to_ondemand = fallback_to_ondemand

    @property
    def heterogeneous_instance_config(self):
        """Gets the heterogeneous_instance_config of this CreateClusterRequestNodeConfiguration.  # noqa: E501


        :return: The heterogeneous_instance_config of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :rtype: CreateClusterRequestHeterogeneousInstanceConfig
        """
        return self._heterogeneous_instance_config

    @heterogeneous_instance_config.setter
    def heterogeneous_instance_config(self, heterogeneous_instance_config):
        """Sets the heterogeneous_instance_config of this CreateClusterRequestNodeConfiguration.


        :param heterogeneous_instance_config: The heterogeneous_instance_config of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :type: CreateClusterRequestHeterogeneousInstanceConfig
        """

        self._heterogeneous_instance_config = heterogeneous_instance_config

    @property
    def idle_cluster_timeout(self):
        """Gets the idle_cluster_timeout of this CreateClusterRequestNodeConfiguration.  # noqa: E501


        :return: The idle_cluster_timeout of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._idle_cluster_timeout

    @idle_cluster_timeout.setter
    def idle_cluster_timeout(self, idle_cluster_timeout):
        """Sets the idle_cluster_timeout of this CreateClusterRequestNodeConfiguration.


        :param idle_cluster_timeout: The idle_cluster_timeout of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :type: float
        """

        self._idle_cluster_timeout = idle_cluster_timeout

    @property
    def idle_cluster_timeout_in_secs(self):
        """Gets the idle_cluster_timeout_in_secs of this CreateClusterRequestNodeConfiguration.  # noqa: E501


        :return: The idle_cluster_timeout_in_secs of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._idle_cluster_timeout_in_secs

    @idle_cluster_timeout_in_secs.setter
    def idle_cluster_timeout_in_secs(self, idle_cluster_timeout_in_secs):
        """Sets the idle_cluster_timeout_in_secs of this CreateClusterRequestNodeConfiguration.


        :param idle_cluster_timeout_in_secs: The idle_cluster_timeout_in_secs of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :type: float
        """

        self._idle_cluster_timeout_in_secs = idle_cluster_timeout_in_secs

    @property
    def initial_nodes(self):
        """Gets the initial_nodes of this CreateClusterRequestNodeConfiguration.  # noqa: E501


        :return: The initial_nodes of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._initial_nodes

    @initial_nodes.setter
    def initial_nodes(self, initial_nodes):
        """Sets the initial_nodes of this CreateClusterRequestNodeConfiguration.


        :param initial_nodes: The initial_nodes of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :type: float
        """

        self._initial_nodes = initial_nodes

    @property
    def master_instance_type(self):
        """Gets the master_instance_type of this CreateClusterRequestNodeConfiguration.  # noqa: E501


        :return: The master_instance_type of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._master_instance_type

    @master_instance_type.setter
    def master_instance_type(self, master_instance_type):
        """Sets the master_instance_type of this CreateClusterRequestNodeConfiguration.


        :param master_instance_type: The master_instance_type of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :type: str
        """

        self._master_instance_type = master_instance_type

    @property
    def max_nodes(self):
        """Gets the max_nodes of this CreateClusterRequestNodeConfiguration.  # noqa: E501


        :return: The max_nodes of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._max_nodes

    @max_nodes.setter
    def max_nodes(self, max_nodes):
        """Sets the max_nodes of this CreateClusterRequestNodeConfiguration.


        :param max_nodes: The max_nodes of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :type: float
        """

        self._max_nodes = max_nodes

    @property
    def node_base_cooldown_period(self):
        """Gets the node_base_cooldown_period of this CreateClusterRequestNodeConfiguration.  # noqa: E501


        :return: The node_base_cooldown_period of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._node_base_cooldown_period

    @node_base_cooldown_period.setter
    def node_base_cooldown_period(self, node_base_cooldown_period):
        """Sets the node_base_cooldown_period of this CreateClusterRequestNodeConfiguration.


        :param node_base_cooldown_period: The node_base_cooldown_period of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :type: float
        """

        self._node_base_cooldown_period = node_base_cooldown_period

    @property
    def node_spot_cooldown_period(self):
        """Gets the node_spot_cooldown_period of this CreateClusterRequestNodeConfiguration.  # noqa: E501


        :return: The node_spot_cooldown_period of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._node_spot_cooldown_period

    @node_spot_cooldown_period.setter
    def node_spot_cooldown_period(self, node_spot_cooldown_period):
        """Sets the node_spot_cooldown_period of this CreateClusterRequestNodeConfiguration.


        :param node_spot_cooldown_period: The node_spot_cooldown_period of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :type: float
        """

        self._node_spot_cooldown_period = node_spot_cooldown_period

    @property
    def slave_instance_type(self):
        """Gets the slave_instance_type of this CreateClusterRequestNodeConfiguration.  # noqa: E501


        :return: The slave_instance_type of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._slave_instance_type

    @slave_instance_type.setter
    def slave_instance_type(self, slave_instance_type):
        """Sets the slave_instance_type of this CreateClusterRequestNodeConfiguration.


        :param slave_instance_type: The slave_instance_type of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :type: str
        """

        self._slave_instance_type = slave_instance_type

    @property
    def slave_request_type(self):
        """Gets the slave_request_type of this CreateClusterRequestNodeConfiguration.  # noqa: E501


        :return: The slave_request_type of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._slave_request_type

    @slave_request_type.setter
    def slave_request_type(self, slave_request_type):
        """Sets the slave_request_type of this CreateClusterRequestNodeConfiguration.


        :param slave_request_type: The slave_request_type of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :type: str
        """

        self._slave_request_type = slave_request_type

    @property
    def spot_block_settings(self):
        """Gets the spot_block_settings of this CreateClusterRequestNodeConfiguration.  # noqa: E501


        :return: The spot_block_settings of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :rtype: CreateClusterRequestSpotBlockSettings
        """
        return self._spot_block_settings

    @spot_block_settings.setter
    def spot_block_settings(self, spot_block_settings):
        """Sets the spot_block_settings of this CreateClusterRequestNodeConfiguration.


        :param spot_block_settings: The spot_block_settings of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :type: CreateClusterRequestSpotBlockSettings
        """

        self._spot_block_settings = spot_block_settings

    @property
    def spot_instance_settings(self):
        """Gets the spot_instance_settings of this CreateClusterRequestNodeConfiguration.  # noqa: E501


        :return: The spot_instance_settings of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :rtype: CreateClusterRequestSpotInstanceSettings
        """
        return self._spot_instance_settings

    @spot_instance_settings.setter
    def spot_instance_settings(self, spot_instance_settings):
        """Sets the spot_instance_settings of this CreateClusterRequestNodeConfiguration.


        :param spot_instance_settings: The spot_instance_settings of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :type: CreateClusterRequestSpotInstanceSettings
        """

        self._spot_instance_settings = spot_instance_settings

    @property
    def stable_spot_instance_settings(self):
        """Gets the stable_spot_instance_settings of this CreateClusterRequestNodeConfiguration.  # noqa: E501


        :return: The stable_spot_instance_settings of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :rtype: CreateClusterRequestStableSpotInstanceSettings
        """
        return self._stable_spot_instance_settings

    @stable_spot_instance_settings.setter
    def stable_spot_instance_settings(self, stable_spot_instance_settings):
        """Sets the stable_spot_instance_settings of this CreateClusterRequestNodeConfiguration.


        :param stable_spot_instance_settings: The stable_spot_instance_settings of this CreateClusterRequestNodeConfiguration.  # noqa: E501
        :type: CreateClusterRequestStableSpotInstanceSettings
        """

        self._stable_spot_instance_settings = stable_spot_instance_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateClusterRequestNodeConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
