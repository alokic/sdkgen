# coding: utf-8

"""
    Quubole API Sepcification

    Operations, requests and responses  # noqa: E501

    OpenAPI spec version: v2.0
    Contact: support@qubole.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateClusterResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'datadog_settings': 'dict(str, object)',
        'disallow_cluster_termination': 'bool',
        'ec2_settings': 'CreateClusterResponseEc2Settings',
        'enable_ganglia_monitoring': 'bool',
        'engine_config': 'CreateClusterResponseEngineConfig',
        'errors': 'list[str]',
        'hadoop_settings': 'CreateClusterResponseHadoopSettings',
        'id': 'float',
        'label': 'list[str]',
        'node_bootstrap_file': 'str',
        'node_configuration': 'CreateClusterResponseNodeConfiguration',
        'presto_settings': 'CreateClusterResponsePrestoSettings',
        'security_settings': 'CreateClusterResponseSecuritySettings',
        'spark_s3_package_name': 'str',
        'spark_settings': 'dict(str, object)',
        'state': 'str',
        'zeppelin_s3_package_name': 'str'
    }

    attribute_map = {
        'datadog_settings': 'datadog_settings',
        'disallow_cluster_termination': 'disallow_cluster_termination',
        'ec2_settings': 'ec2_settings',
        'enable_ganglia_monitoring': 'enable_ganglia_monitoring',
        'engine_config': 'engine_config',
        'errors': 'errors',
        'hadoop_settings': 'hadoop_settings',
        'id': 'id',
        'label': 'label',
        'node_bootstrap_file': 'node_bootstrap_file',
        'node_configuration': 'node_configuration',
        'presto_settings': 'presto_settings',
        'security_settings': 'security_settings',
        'spark_s3_package_name': 'spark_s3_package_name',
        'spark_settings': 'spark_settings',
        'state': 'state',
        'zeppelin_s3_package_name': 'zeppelin_s3_package_name'
    }

    def __init__(self, datadog_settings=None, disallow_cluster_termination=None, ec2_settings=None, enable_ganglia_monitoring=None, engine_config=None, errors=None, hadoop_settings=None, id=None, label=None, node_bootstrap_file=None, node_configuration=None, presto_settings=None, security_settings=None, spark_s3_package_name=None, spark_settings=None, state=None, zeppelin_s3_package_name=None):  # noqa: E501
        """CreateClusterResponse - a model defined in OpenAPI"""  # noqa: E501

        self._datadog_settings = None
        self._disallow_cluster_termination = None
        self._ec2_settings = None
        self._enable_ganglia_monitoring = None
        self._engine_config = None
        self._errors = None
        self._hadoop_settings = None
        self._id = None
        self._label = None
        self._node_bootstrap_file = None
        self._node_configuration = None
        self._presto_settings = None
        self._security_settings = None
        self._spark_s3_package_name = None
        self._spark_settings = None
        self._state = None
        self._zeppelin_s3_package_name = None
        self.discriminator = None

        if datadog_settings is not None:
            self.datadog_settings = datadog_settings
        if disallow_cluster_termination is not None:
            self.disallow_cluster_termination = disallow_cluster_termination
        if ec2_settings is not None:
            self.ec2_settings = ec2_settings
        if enable_ganglia_monitoring is not None:
            self.enable_ganglia_monitoring = enable_ganglia_monitoring
        if engine_config is not None:
            self.engine_config = engine_config
        if errors is not None:
            self.errors = errors
        if hadoop_settings is not None:
            self.hadoop_settings = hadoop_settings
        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if node_bootstrap_file is not None:
            self.node_bootstrap_file = node_bootstrap_file
        if node_configuration is not None:
            self.node_configuration = node_configuration
        if presto_settings is not None:
            self.presto_settings = presto_settings
        if security_settings is not None:
            self.security_settings = security_settings
        if spark_s3_package_name is not None:
            self.spark_s3_package_name = spark_s3_package_name
        if spark_settings is not None:
            self.spark_settings = spark_settings
        if state is not None:
            self.state = state
        if zeppelin_s3_package_name is not None:
            self.zeppelin_s3_package_name = zeppelin_s3_package_name

    @property
    def datadog_settings(self):
        """Gets the datadog_settings of this CreateClusterResponse.  # noqa: E501


        :return: The datadog_settings of this CreateClusterResponse.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._datadog_settings

    @datadog_settings.setter
    def datadog_settings(self, datadog_settings):
        """Sets the datadog_settings of this CreateClusterResponse.


        :param datadog_settings: The datadog_settings of this CreateClusterResponse.  # noqa: E501
        :type: dict(str, object)
        """

        self._datadog_settings = datadog_settings

    @property
    def disallow_cluster_termination(self):
        """Gets the disallow_cluster_termination of this CreateClusterResponse.  # noqa: E501


        :return: The disallow_cluster_termination of this CreateClusterResponse.  # noqa: E501
        :rtype: bool
        """
        return self._disallow_cluster_termination

    @disallow_cluster_termination.setter
    def disallow_cluster_termination(self, disallow_cluster_termination):
        """Sets the disallow_cluster_termination of this CreateClusterResponse.


        :param disallow_cluster_termination: The disallow_cluster_termination of this CreateClusterResponse.  # noqa: E501
        :type: bool
        """

        self._disallow_cluster_termination = disallow_cluster_termination

    @property
    def ec2_settings(self):
        """Gets the ec2_settings of this CreateClusterResponse.  # noqa: E501


        :return: The ec2_settings of this CreateClusterResponse.  # noqa: E501
        :rtype: CreateClusterResponseEc2Settings
        """
        return self._ec2_settings

    @ec2_settings.setter
    def ec2_settings(self, ec2_settings):
        """Sets the ec2_settings of this CreateClusterResponse.


        :param ec2_settings: The ec2_settings of this CreateClusterResponse.  # noqa: E501
        :type: CreateClusterResponseEc2Settings
        """

        self._ec2_settings = ec2_settings

    @property
    def enable_ganglia_monitoring(self):
        """Gets the enable_ganglia_monitoring of this CreateClusterResponse.  # noqa: E501


        :return: The enable_ganglia_monitoring of this CreateClusterResponse.  # noqa: E501
        :rtype: bool
        """
        return self._enable_ganglia_monitoring

    @enable_ganglia_monitoring.setter
    def enable_ganglia_monitoring(self, enable_ganglia_monitoring):
        """Sets the enable_ganglia_monitoring of this CreateClusterResponse.


        :param enable_ganglia_monitoring: The enable_ganglia_monitoring of this CreateClusterResponse.  # noqa: E501
        :type: bool
        """

        self._enable_ganglia_monitoring = enable_ganglia_monitoring

    @property
    def engine_config(self):
        """Gets the engine_config of this CreateClusterResponse.  # noqa: E501


        :return: The engine_config of this CreateClusterResponse.  # noqa: E501
        :rtype: CreateClusterResponseEngineConfig
        """
        return self._engine_config

    @engine_config.setter
    def engine_config(self, engine_config):
        """Sets the engine_config of this CreateClusterResponse.


        :param engine_config: The engine_config of this CreateClusterResponse.  # noqa: E501
        :type: CreateClusterResponseEngineConfig
        """

        self._engine_config = engine_config

    @property
    def errors(self):
        """Gets the errors of this CreateClusterResponse.  # noqa: E501


        :return: The errors of this CreateClusterResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this CreateClusterResponse.


        :param errors: The errors of this CreateClusterResponse.  # noqa: E501
        :type: list[str]
        """

        self._errors = errors

    @property
    def hadoop_settings(self):
        """Gets the hadoop_settings of this CreateClusterResponse.  # noqa: E501


        :return: The hadoop_settings of this CreateClusterResponse.  # noqa: E501
        :rtype: CreateClusterResponseHadoopSettings
        """
        return self._hadoop_settings

    @hadoop_settings.setter
    def hadoop_settings(self, hadoop_settings):
        """Sets the hadoop_settings of this CreateClusterResponse.


        :param hadoop_settings: The hadoop_settings of this CreateClusterResponse.  # noqa: E501
        :type: CreateClusterResponseHadoopSettings
        """

        self._hadoop_settings = hadoop_settings

    @property
    def id(self):
        """Gets the id of this CreateClusterResponse.  # noqa: E501


        :return: The id of this CreateClusterResponse.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateClusterResponse.


        :param id: The id of this CreateClusterResponse.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this CreateClusterResponse.  # noqa: E501


        :return: The label of this CreateClusterResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CreateClusterResponse.


        :param label: The label of this CreateClusterResponse.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def node_bootstrap_file(self):
        """Gets the node_bootstrap_file of this CreateClusterResponse.  # noqa: E501


        :return: The node_bootstrap_file of this CreateClusterResponse.  # noqa: E501
        :rtype: str
        """
        return self._node_bootstrap_file

    @node_bootstrap_file.setter
    def node_bootstrap_file(self, node_bootstrap_file):
        """Sets the node_bootstrap_file of this CreateClusterResponse.


        :param node_bootstrap_file: The node_bootstrap_file of this CreateClusterResponse.  # noqa: E501
        :type: str
        """

        self._node_bootstrap_file = node_bootstrap_file

    @property
    def node_configuration(self):
        """Gets the node_configuration of this CreateClusterResponse.  # noqa: E501


        :return: The node_configuration of this CreateClusterResponse.  # noqa: E501
        :rtype: CreateClusterResponseNodeConfiguration
        """
        return self._node_configuration

    @node_configuration.setter
    def node_configuration(self, node_configuration):
        """Sets the node_configuration of this CreateClusterResponse.


        :param node_configuration: The node_configuration of this CreateClusterResponse.  # noqa: E501
        :type: CreateClusterResponseNodeConfiguration
        """

        self._node_configuration = node_configuration

    @property
    def presto_settings(self):
        """Gets the presto_settings of this CreateClusterResponse.  # noqa: E501


        :return: The presto_settings of this CreateClusterResponse.  # noqa: E501
        :rtype: CreateClusterResponsePrestoSettings
        """
        return self._presto_settings

    @presto_settings.setter
    def presto_settings(self, presto_settings):
        """Sets the presto_settings of this CreateClusterResponse.


        :param presto_settings: The presto_settings of this CreateClusterResponse.  # noqa: E501
        :type: CreateClusterResponsePrestoSettings
        """

        self._presto_settings = presto_settings

    @property
    def security_settings(self):
        """Gets the security_settings of this CreateClusterResponse.  # noqa: E501


        :return: The security_settings of this CreateClusterResponse.  # noqa: E501
        :rtype: CreateClusterResponseSecuritySettings
        """
        return self._security_settings

    @security_settings.setter
    def security_settings(self, security_settings):
        """Sets the security_settings of this CreateClusterResponse.


        :param security_settings: The security_settings of this CreateClusterResponse.  # noqa: E501
        :type: CreateClusterResponseSecuritySettings
        """

        self._security_settings = security_settings

    @property
    def spark_s3_package_name(self):
        """Gets the spark_s3_package_name of this CreateClusterResponse.  # noqa: E501


        :return: The spark_s3_package_name of this CreateClusterResponse.  # noqa: E501
        :rtype: str
        """
        return self._spark_s3_package_name

    @spark_s3_package_name.setter
    def spark_s3_package_name(self, spark_s3_package_name):
        """Sets the spark_s3_package_name of this CreateClusterResponse.


        :param spark_s3_package_name: The spark_s3_package_name of this CreateClusterResponse.  # noqa: E501
        :type: str
        """

        self._spark_s3_package_name = spark_s3_package_name

    @property
    def spark_settings(self):
        """Gets the spark_settings of this CreateClusterResponse.  # noqa: E501


        :return: The spark_settings of this CreateClusterResponse.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._spark_settings

    @spark_settings.setter
    def spark_settings(self, spark_settings):
        """Sets the spark_settings of this CreateClusterResponse.


        :param spark_settings: The spark_settings of this CreateClusterResponse.  # noqa: E501
        :type: dict(str, object)
        """

        self._spark_settings = spark_settings

    @property
    def state(self):
        """Gets the state of this CreateClusterResponse.  # noqa: E501


        :return: The state of this CreateClusterResponse.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CreateClusterResponse.


        :param state: The state of this CreateClusterResponse.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def zeppelin_s3_package_name(self):
        """Gets the zeppelin_s3_package_name of this CreateClusterResponse.  # noqa: E501


        :return: The zeppelin_s3_package_name of this CreateClusterResponse.  # noqa: E501
        :rtype: str
        """
        return self._zeppelin_s3_package_name

    @zeppelin_s3_package_name.setter
    def zeppelin_s3_package_name(self, zeppelin_s3_package_name):
        """Sets the zeppelin_s3_package_name of this CreateClusterResponse.


        :param zeppelin_s3_package_name: The zeppelin_s3_package_name of this CreateClusterResponse.  # noqa: E501
        :type: str
        """

        self._zeppelin_s3_package_name = zeppelin_s3_package_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateClusterResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
