# coding: utf-8

"""
    Quubole API Sepcification

    Operations, requests and responses  # noqa: E501

    OpenAPI spec version: v2.0
    Contact: support@qubole.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateClusterRequestHiveSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hive_qubole_metadata_cache': 'str',
        'hive_version': 'str',
        'hs2_thrift_port': 'str',
        'is_hs2': 'bool',
        'overrides': 'str'
    }

    attribute_map = {
        'hive_qubole_metadata_cache': 'hive.qubole.metadata.cache',
        'hive_version': 'hive_version',
        'hs2_thrift_port': 'hs2_thrift_port',
        'is_hs2': 'is_hs2',
        'overrides': 'overrides'
    }

    def __init__(self, hive_qubole_metadata_cache=None, hive_version=None, hs2_thrift_port=None, is_hs2=None, overrides=None):  # noqa: E501
        """CreateClusterRequestHiveSettings - a model defined in OpenAPI"""  # noqa: E501

        self._hive_qubole_metadata_cache = None
        self._hive_version = None
        self._hs2_thrift_port = None
        self._is_hs2 = None
        self._overrides = None
        self.discriminator = None

        if hive_qubole_metadata_cache is not None:
            self.hive_qubole_metadata_cache = hive_qubole_metadata_cache
        if hive_version is not None:
            self.hive_version = hive_version
        if hs2_thrift_port is not None:
            self.hs2_thrift_port = hs2_thrift_port
        if is_hs2 is not None:
            self.is_hs2 = is_hs2
        if overrides is not None:
            self.overrides = overrides

    @property
    def hive_qubole_metadata_cache(self):
        """Gets the hive_qubole_metadata_cache of this CreateClusterRequestHiveSettings.  # noqa: E501


        :return: The hive_qubole_metadata_cache of this CreateClusterRequestHiveSettings.  # noqa: E501
        :rtype: str
        """
        return self._hive_qubole_metadata_cache

    @hive_qubole_metadata_cache.setter
    def hive_qubole_metadata_cache(self, hive_qubole_metadata_cache):
        """Sets the hive_qubole_metadata_cache of this CreateClusterRequestHiveSettings.


        :param hive_qubole_metadata_cache: The hive_qubole_metadata_cache of this CreateClusterRequestHiveSettings.  # noqa: E501
        :type: str
        """

        self._hive_qubole_metadata_cache = hive_qubole_metadata_cache

    @property
    def hive_version(self):
        """Gets the hive_version of this CreateClusterRequestHiveSettings.  # noqa: E501


        :return: The hive_version of this CreateClusterRequestHiveSettings.  # noqa: E501
        :rtype: str
        """
        return self._hive_version

    @hive_version.setter
    def hive_version(self, hive_version):
        """Sets the hive_version of this CreateClusterRequestHiveSettings.


        :param hive_version: The hive_version of this CreateClusterRequestHiveSettings.  # noqa: E501
        :type: str
        """

        self._hive_version = hive_version

    @property
    def hs2_thrift_port(self):
        """Gets the hs2_thrift_port of this CreateClusterRequestHiveSettings.  # noqa: E501


        :return: The hs2_thrift_port of this CreateClusterRequestHiveSettings.  # noqa: E501
        :rtype: str
        """
        return self._hs2_thrift_port

    @hs2_thrift_port.setter
    def hs2_thrift_port(self, hs2_thrift_port):
        """Sets the hs2_thrift_port of this CreateClusterRequestHiveSettings.


        :param hs2_thrift_port: The hs2_thrift_port of this CreateClusterRequestHiveSettings.  # noqa: E501
        :type: str
        """

        self._hs2_thrift_port = hs2_thrift_port

    @property
    def is_hs2(self):
        """Gets the is_hs2 of this CreateClusterRequestHiveSettings.  # noqa: E501


        :return: The is_hs2 of this CreateClusterRequestHiveSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_hs2

    @is_hs2.setter
    def is_hs2(self, is_hs2):
        """Sets the is_hs2 of this CreateClusterRequestHiveSettings.


        :param is_hs2: The is_hs2 of this CreateClusterRequestHiveSettings.  # noqa: E501
        :type: bool
        """

        self._is_hs2 = is_hs2

    @property
    def overrides(self):
        """Gets the overrides of this CreateClusterRequestHiveSettings.  # noqa: E501


        :return: The overrides of this CreateClusterRequestHiveSettings.  # noqa: E501
        :rtype: str
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this CreateClusterRequestHiveSettings.


        :param overrides: The overrides of this CreateClusterRequestHiveSettings.  # noqa: E501
        :type: str
        """

        self._overrides = overrides

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateClusterRequestHiveSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
