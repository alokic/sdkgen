# coding: utf-8

"""
    Qubole API Sepcification

    Operations, requests and responses  # noqa: E501

    OpenAPI spec version: v1.11.0
    Contact: support@qubole.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateClusterClusterResponseEc2Settings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aws_preferred_availability_zone': 'str',
        'aws_region': 'str',
        'compute_access_key': 'str',
        'compute_secret_key': 'str',
        'compute_validated': 'bool',
        'subnet_id': 'str',
        'vpc_id': 'str'
    }

    attribute_map = {
        'aws_preferred_availability_zone': 'aws_preferred_availability_zone',
        'aws_region': 'aws_region',
        'compute_access_key': 'compute_access_key',
        'compute_secret_key': 'compute_secret_key',
        'compute_validated': 'compute_validated',
        'subnet_id': 'subnet_id',
        'vpc_id': 'vpc_id'
    }

    def __init__(self, aws_preferred_availability_zone=None, aws_region=None, compute_access_key=None, compute_secret_key=None, compute_validated=None, subnet_id=None, vpc_id=None):  # noqa: E501
        """CreateClusterClusterResponseEc2Settings - a model defined in OpenAPI"""  # noqa: E501

        self._aws_preferred_availability_zone = None
        self._aws_region = None
        self._compute_access_key = None
        self._compute_secret_key = None
        self._compute_validated = None
        self._subnet_id = None
        self._vpc_id = None
        self.discriminator = None

        if aws_preferred_availability_zone is not None:
            self.aws_preferred_availability_zone = aws_preferred_availability_zone
        if aws_region is not None:
            self.aws_region = aws_region
        if compute_access_key is not None:
            self.compute_access_key = compute_access_key
        if compute_secret_key is not None:
            self.compute_secret_key = compute_secret_key
        if compute_validated is not None:
            self.compute_validated = compute_validated
        if subnet_id is not None:
            self.subnet_id = subnet_id
        if vpc_id is not None:
            self.vpc_id = vpc_id

    @property
    def aws_preferred_availability_zone(self):
        """Gets the aws_preferred_availability_zone of this CreateClusterClusterResponseEc2Settings.  # noqa: E501


        :return: The aws_preferred_availability_zone of this CreateClusterClusterResponseEc2Settings.  # noqa: E501
        :rtype: str
        """
        return self._aws_preferred_availability_zone

    @aws_preferred_availability_zone.setter
    def aws_preferred_availability_zone(self, aws_preferred_availability_zone):
        """Sets the aws_preferred_availability_zone of this CreateClusterClusterResponseEc2Settings.


        :param aws_preferred_availability_zone: The aws_preferred_availability_zone of this CreateClusterClusterResponseEc2Settings.  # noqa: E501
        :type: str
        """

        self._aws_preferred_availability_zone = aws_preferred_availability_zone

    @property
    def aws_region(self):
        """Gets the aws_region of this CreateClusterClusterResponseEc2Settings.  # noqa: E501


        :return: The aws_region of this CreateClusterClusterResponseEc2Settings.  # noqa: E501
        :rtype: str
        """
        return self._aws_region

    @aws_region.setter
    def aws_region(self, aws_region):
        """Sets the aws_region of this CreateClusterClusterResponseEc2Settings.


        :param aws_region: The aws_region of this CreateClusterClusterResponseEc2Settings.  # noqa: E501
        :type: str
        """

        self._aws_region = aws_region

    @property
    def compute_access_key(self):
        """Gets the compute_access_key of this CreateClusterClusterResponseEc2Settings.  # noqa: E501


        :return: The compute_access_key of this CreateClusterClusterResponseEc2Settings.  # noqa: E501
        :rtype: str
        """
        return self._compute_access_key

    @compute_access_key.setter
    def compute_access_key(self, compute_access_key):
        """Sets the compute_access_key of this CreateClusterClusterResponseEc2Settings.


        :param compute_access_key: The compute_access_key of this CreateClusterClusterResponseEc2Settings.  # noqa: E501
        :type: str
        """

        self._compute_access_key = compute_access_key

    @property
    def compute_secret_key(self):
        """Gets the compute_secret_key of this CreateClusterClusterResponseEc2Settings.  # noqa: E501


        :return: The compute_secret_key of this CreateClusterClusterResponseEc2Settings.  # noqa: E501
        :rtype: str
        """
        return self._compute_secret_key

    @compute_secret_key.setter
    def compute_secret_key(self, compute_secret_key):
        """Sets the compute_secret_key of this CreateClusterClusterResponseEc2Settings.


        :param compute_secret_key: The compute_secret_key of this CreateClusterClusterResponseEc2Settings.  # noqa: E501
        :type: str
        """

        self._compute_secret_key = compute_secret_key

    @property
    def compute_validated(self):
        """Gets the compute_validated of this CreateClusterClusterResponseEc2Settings.  # noqa: E501


        :return: The compute_validated of this CreateClusterClusterResponseEc2Settings.  # noqa: E501
        :rtype: bool
        """
        return self._compute_validated

    @compute_validated.setter
    def compute_validated(self, compute_validated):
        """Sets the compute_validated of this CreateClusterClusterResponseEc2Settings.


        :param compute_validated: The compute_validated of this CreateClusterClusterResponseEc2Settings.  # noqa: E501
        :type: bool
        """

        self._compute_validated = compute_validated

    @property
    def subnet_id(self):
        """Gets the subnet_id of this CreateClusterClusterResponseEc2Settings.  # noqa: E501


        :return: The subnet_id of this CreateClusterClusterResponseEc2Settings.  # noqa: E501
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this CreateClusterClusterResponseEc2Settings.


        :param subnet_id: The subnet_id of this CreateClusterClusterResponseEc2Settings.  # noqa: E501
        :type: str
        """

        self._subnet_id = subnet_id

    @property
    def vpc_id(self):
        """Gets the vpc_id of this CreateClusterClusterResponseEc2Settings.  # noqa: E501


        :return: The vpc_id of this CreateClusterClusterResponseEc2Settings.  # noqa: E501
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this CreateClusterClusterResponseEc2Settings.


        :param vpc_id: The vpc_id of this CreateClusterClusterResponseEc2Settings.  # noqa: E501
        :type: str
        """

        self._vpc_id = vpc_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateClusterClusterResponseEc2Settings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
