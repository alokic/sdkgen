# coding: utf-8

"""
    Qubole API Sepcification

    Operations, requests and responses  # noqa: E501

    OpenAPI spec version: v1.11.0
    Contact: support@qubole.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateClusterClusterRequestStableSpotInstanceSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'maximum_bid_price_percentage': 'float',
        'timeout_for_request': 'float'
    }

    attribute_map = {
        'maximum_bid_price_percentage': 'maximum_bid_price_percentage',
        'timeout_for_request': 'timeout_for_request'
    }

    def __init__(self, maximum_bid_price_percentage=None, timeout_for_request=None):  # noqa: E501
        """CreateClusterClusterRequestStableSpotInstanceSettings - a model defined in OpenAPI"""  # noqa: E501

        self._maximum_bid_price_percentage = None
        self._timeout_for_request = None
        self.discriminator = None

        if maximum_bid_price_percentage is not None:
            self.maximum_bid_price_percentage = maximum_bid_price_percentage
        if timeout_for_request is not None:
            self.timeout_for_request = timeout_for_request

    @property
    def maximum_bid_price_percentage(self):
        """Gets the maximum_bid_price_percentage of this CreateClusterClusterRequestStableSpotInstanceSettings.  # noqa: E501


        :return: The maximum_bid_price_percentage of this CreateClusterClusterRequestStableSpotInstanceSettings.  # noqa: E501
        :rtype: float
        """
        return self._maximum_bid_price_percentage

    @maximum_bid_price_percentage.setter
    def maximum_bid_price_percentage(self, maximum_bid_price_percentage):
        """Sets the maximum_bid_price_percentage of this CreateClusterClusterRequestStableSpotInstanceSettings.


        :param maximum_bid_price_percentage: The maximum_bid_price_percentage of this CreateClusterClusterRequestStableSpotInstanceSettings.  # noqa: E501
        :type: float
        """

        self._maximum_bid_price_percentage = maximum_bid_price_percentage

    @property
    def timeout_for_request(self):
        """Gets the timeout_for_request of this CreateClusterClusterRequestStableSpotInstanceSettings.  # noqa: E501


        :return: The timeout_for_request of this CreateClusterClusterRequestStableSpotInstanceSettings.  # noqa: E501
        :rtype: float
        """
        return self._timeout_for_request

    @timeout_for_request.setter
    def timeout_for_request(self, timeout_for_request):
        """Sets the timeout_for_request of this CreateClusterClusterRequestStableSpotInstanceSettings.


        :param timeout_for_request: The timeout_for_request of this CreateClusterClusterRequestStableSpotInstanceSettings.  # noqa: E501
        :type: float
        """

        self._timeout_for_request = timeout_for_request

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateClusterClusterRequestStableSpotInstanceSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
