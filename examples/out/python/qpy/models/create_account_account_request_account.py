# coding: utf-8

"""
    Qubole API Sepcification

    Operations, requests and responses  # noqa: E501

    OpenAPI spec version: v1.11.0
    Contact: support@qubole.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateAccountAccountRequestAccount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cache_quota_size_in_gb': 'float',
        'aws_region': 'str',
        'compute_access_key': 'str',
        'compute_secret_key': 'str',
        'compute_type': 'str',
        'defloc': 'str',
        'idle_cluster_timeout': 'float',
        'idle_session_timeout': 'float',
        'level': 'str',
        'name': 'str',
        'storage_access_key': 'str',
        'storage_secret_key': 'str',
        'storage_type': 'str',
        'sub_account_creation': 'bool'
    }

    attribute_map = {
        'cache_quota_size_in_gb': 'CacheQuotaSizeInGB',
        'aws_region': 'aws_region',
        'compute_access_key': 'compute_access_key',
        'compute_secret_key': 'compute_secret_key',
        'compute_type': 'compute_type',
        'defloc': 'defloc',
        'idle_cluster_timeout': 'idle_cluster_timeout',
        'idle_session_timeout': 'idle_session_timeout',
        'level': 'level',
        'name': 'name',
        'storage_access_key': 'storage_access_key',
        'storage_secret_key': 'storage_secret_key',
        'storage_type': 'storage_type',
        'sub_account_creation': 'sub_account_creation'
    }

    def __init__(self, cache_quota_size_in_gb=None, aws_region=None, compute_access_key=None, compute_secret_key=None, compute_type=None, defloc=None, idle_cluster_timeout=None, idle_session_timeout=None, level=None, name=None, storage_access_key=None, storage_secret_key=None, storage_type=None, sub_account_creation=None):  # noqa: E501
        """CreateAccountAccountRequestAccount - a model defined in OpenAPI"""  # noqa: E501

        self._cache_quota_size_in_gb = None
        self._aws_region = None
        self._compute_access_key = None
        self._compute_secret_key = None
        self._compute_type = None
        self._defloc = None
        self._idle_cluster_timeout = None
        self._idle_session_timeout = None
        self._level = None
        self._name = None
        self._storage_access_key = None
        self._storage_secret_key = None
        self._storage_type = None
        self._sub_account_creation = None
        self.discriminator = None

        if cache_quota_size_in_gb is not None:
            self.cache_quota_size_in_gb = cache_quota_size_in_gb
        self.aws_region = aws_region
        if compute_access_key is not None:
            self.compute_access_key = compute_access_key
        if compute_secret_key is not None:
            self.compute_secret_key = compute_secret_key
        if compute_type is not None:
            self.compute_type = compute_type
        if defloc is not None:
            self.defloc = defloc
        if idle_cluster_timeout is not None:
            self.idle_cluster_timeout = idle_cluster_timeout
        if idle_session_timeout is not None:
            self.idle_session_timeout = idle_session_timeout
        if level is not None:
            self.level = level
        if name is not None:
            self.name = name
        if storage_access_key is not None:
            self.storage_access_key = storage_access_key
        if storage_secret_key is not None:
            self.storage_secret_key = storage_secret_key
        if storage_type is not None:
            self.storage_type = storage_type
        if sub_account_creation is not None:
            self.sub_account_creation = sub_account_creation

    @property
    def cache_quota_size_in_gb(self):
        """Gets the cache_quota_size_in_gb of this CreateAccountAccountRequestAccount.  # noqa: E501


        :return: The cache_quota_size_in_gb of this CreateAccountAccountRequestAccount.  # noqa: E501
        :rtype: float
        """
        return self._cache_quota_size_in_gb

    @cache_quota_size_in_gb.setter
    def cache_quota_size_in_gb(self, cache_quota_size_in_gb):
        """Sets the cache_quota_size_in_gb of this CreateAccountAccountRequestAccount.


        :param cache_quota_size_in_gb: The cache_quota_size_in_gb of this CreateAccountAccountRequestAccount.  # noqa: E501
        :type: float
        """

        self._cache_quota_size_in_gb = cache_quota_size_in_gb

    @property
    def aws_region(self):
        """Gets the aws_region of this CreateAccountAccountRequestAccount.  # noqa: E501


        :return: The aws_region of this CreateAccountAccountRequestAccount.  # noqa: E501
        :rtype: str
        """
        return self._aws_region

    @aws_region.setter
    def aws_region(self, aws_region):
        """Sets the aws_region of this CreateAccountAccountRequestAccount.


        :param aws_region: The aws_region of this CreateAccountAccountRequestAccount.  # noqa: E501
        :type: str
        """
        if aws_region is None:
            raise ValueError("Invalid value for `aws_region`, must not be `None`")  # noqa: E501

        self._aws_region = aws_region

    @property
    def compute_access_key(self):
        """Gets the compute_access_key of this CreateAccountAccountRequestAccount.  # noqa: E501


        :return: The compute_access_key of this CreateAccountAccountRequestAccount.  # noqa: E501
        :rtype: str
        """
        return self._compute_access_key

    @compute_access_key.setter
    def compute_access_key(self, compute_access_key):
        """Sets the compute_access_key of this CreateAccountAccountRequestAccount.


        :param compute_access_key: The compute_access_key of this CreateAccountAccountRequestAccount.  # noqa: E501
        :type: str
        """

        self._compute_access_key = compute_access_key

    @property
    def compute_secret_key(self):
        """Gets the compute_secret_key of this CreateAccountAccountRequestAccount.  # noqa: E501


        :return: The compute_secret_key of this CreateAccountAccountRequestAccount.  # noqa: E501
        :rtype: str
        """
        return self._compute_secret_key

    @compute_secret_key.setter
    def compute_secret_key(self, compute_secret_key):
        """Sets the compute_secret_key of this CreateAccountAccountRequestAccount.


        :param compute_secret_key: The compute_secret_key of this CreateAccountAccountRequestAccount.  # noqa: E501
        :type: str
        """

        self._compute_secret_key = compute_secret_key

    @property
    def compute_type(self):
        """Gets the compute_type of this CreateAccountAccountRequestAccount.  # noqa: E501


        :return: The compute_type of this CreateAccountAccountRequestAccount.  # noqa: E501
        :rtype: str
        """
        return self._compute_type

    @compute_type.setter
    def compute_type(self, compute_type):
        """Sets the compute_type of this CreateAccountAccountRequestAccount.


        :param compute_type: The compute_type of this CreateAccountAccountRequestAccount.  # noqa: E501
        :type: str
        """

        self._compute_type = compute_type

    @property
    def defloc(self):
        """Gets the defloc of this CreateAccountAccountRequestAccount.  # noqa: E501


        :return: The defloc of this CreateAccountAccountRequestAccount.  # noqa: E501
        :rtype: str
        """
        return self._defloc

    @defloc.setter
    def defloc(self, defloc):
        """Sets the defloc of this CreateAccountAccountRequestAccount.


        :param defloc: The defloc of this CreateAccountAccountRequestAccount.  # noqa: E501
        :type: str
        """

        self._defloc = defloc

    @property
    def idle_cluster_timeout(self):
        """Gets the idle_cluster_timeout of this CreateAccountAccountRequestAccount.  # noqa: E501


        :return: The idle_cluster_timeout of this CreateAccountAccountRequestAccount.  # noqa: E501
        :rtype: float
        """
        return self._idle_cluster_timeout

    @idle_cluster_timeout.setter
    def idle_cluster_timeout(self, idle_cluster_timeout):
        """Sets the idle_cluster_timeout of this CreateAccountAccountRequestAccount.


        :param idle_cluster_timeout: The idle_cluster_timeout of this CreateAccountAccountRequestAccount.  # noqa: E501
        :type: float
        """

        self._idle_cluster_timeout = idle_cluster_timeout

    @property
    def idle_session_timeout(self):
        """Gets the idle_session_timeout of this CreateAccountAccountRequestAccount.  # noqa: E501


        :return: The idle_session_timeout of this CreateAccountAccountRequestAccount.  # noqa: E501
        :rtype: float
        """
        return self._idle_session_timeout

    @idle_session_timeout.setter
    def idle_session_timeout(self, idle_session_timeout):
        """Sets the idle_session_timeout of this CreateAccountAccountRequestAccount.


        :param idle_session_timeout: The idle_session_timeout of this CreateAccountAccountRequestAccount.  # noqa: E501
        :type: float
        """

        self._idle_session_timeout = idle_session_timeout

    @property
    def level(self):
        """Gets the level of this CreateAccountAccountRequestAccount.  # noqa: E501


        :return: The level of this CreateAccountAccountRequestAccount.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this CreateAccountAccountRequestAccount.


        :param level: The level of this CreateAccountAccountRequestAccount.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def name(self):
        """Gets the name of this CreateAccountAccountRequestAccount.  # noqa: E501


        :return: The name of this CreateAccountAccountRequestAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAccountAccountRequestAccount.


        :param name: The name of this CreateAccountAccountRequestAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def storage_access_key(self):
        """Gets the storage_access_key of this CreateAccountAccountRequestAccount.  # noqa: E501


        :return: The storage_access_key of this CreateAccountAccountRequestAccount.  # noqa: E501
        :rtype: str
        """
        return self._storage_access_key

    @storage_access_key.setter
    def storage_access_key(self, storage_access_key):
        """Sets the storage_access_key of this CreateAccountAccountRequestAccount.


        :param storage_access_key: The storage_access_key of this CreateAccountAccountRequestAccount.  # noqa: E501
        :type: str
        """

        self._storage_access_key = storage_access_key

    @property
    def storage_secret_key(self):
        """Gets the storage_secret_key of this CreateAccountAccountRequestAccount.  # noqa: E501


        :return: The storage_secret_key of this CreateAccountAccountRequestAccount.  # noqa: E501
        :rtype: str
        """
        return self._storage_secret_key

    @storage_secret_key.setter
    def storage_secret_key(self, storage_secret_key):
        """Sets the storage_secret_key of this CreateAccountAccountRequestAccount.


        :param storage_secret_key: The storage_secret_key of this CreateAccountAccountRequestAccount.  # noqa: E501
        :type: str
        """

        self._storage_secret_key = storage_secret_key

    @property
    def storage_type(self):
        """Gets the storage_type of this CreateAccountAccountRequestAccount.  # noqa: E501


        :return: The storage_type of this CreateAccountAccountRequestAccount.  # noqa: E501
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this CreateAccountAccountRequestAccount.


        :param storage_type: The storage_type of this CreateAccountAccountRequestAccount.  # noqa: E501
        :type: str
        """

        self._storage_type = storage_type

    @property
    def sub_account_creation(self):
        """Gets the sub_account_creation of this CreateAccountAccountRequestAccount.  # noqa: E501


        :return: The sub_account_creation of this CreateAccountAccountRequestAccount.  # noqa: E501
        :rtype: bool
        """
        return self._sub_account_creation

    @sub_account_creation.setter
    def sub_account_creation(self, sub_account_creation):
        """Sets the sub_account_creation of this CreateAccountAccountRequestAccount.


        :param sub_account_creation: The sub_account_creation of this CreateAccountAccountRequestAccount.  # noqa: E501
        :type: bool
        """

        self._sub_account_creation = sub_account_creation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAccountAccountRequestAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
