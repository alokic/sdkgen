# coding: utf-8

"""
    Qubole API Sepcification

    Operations, requests and responses  # noqa: E501

    OpenAPI spec version: v1.11.0
    Contact: support@qubole.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateClusterClusterRequestHadoopSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'custom_config': 'dict(str, object)',
        'fairscheduler_settings': 'CreateClusterClusterRequestFairschedulerSettings',
        'max_nodes': 'float',
        'use_hadoop2': 'bool',
        'use_qubole_placement_policy': 'str',
        'use_spark': 'bool'
    }

    attribute_map = {
        'custom_config': 'custom_config',
        'fairscheduler_settings': 'fairscheduler_settings',
        'max_nodes': 'max_nodes',
        'use_hadoop2': 'use_hadoop2',
        'use_qubole_placement_policy': 'use_qubole_placement_policy',
        'use_spark': 'use_spark'
    }

    def __init__(self, custom_config=None, fairscheduler_settings=None, max_nodes=None, use_hadoop2=None, use_qubole_placement_policy=None, use_spark=None):  # noqa: E501
        """CreateClusterClusterRequestHadoopSettings - a model defined in OpenAPI"""  # noqa: E501

        self._custom_config = None
        self._fairscheduler_settings = None
        self._max_nodes = None
        self._use_hadoop2 = None
        self._use_qubole_placement_policy = None
        self._use_spark = None
        self.discriminator = None

        if custom_config is not None:
            self.custom_config = custom_config
        if fairscheduler_settings is not None:
            self.fairscheduler_settings = fairscheduler_settings
        if max_nodes is not None:
            self.max_nodes = max_nodes
        if use_hadoop2 is not None:
            self.use_hadoop2 = use_hadoop2
        if use_qubole_placement_policy is not None:
            self.use_qubole_placement_policy = use_qubole_placement_policy
        if use_spark is not None:
            self.use_spark = use_spark

    @property
    def custom_config(self):
        """Gets the custom_config of this CreateClusterClusterRequestHadoopSettings.  # noqa: E501


        :return: The custom_config of this CreateClusterClusterRequestHadoopSettings.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_config

    @custom_config.setter
    def custom_config(self, custom_config):
        """Sets the custom_config of this CreateClusterClusterRequestHadoopSettings.


        :param custom_config: The custom_config of this CreateClusterClusterRequestHadoopSettings.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_config = custom_config

    @property
    def fairscheduler_settings(self):
        """Gets the fairscheduler_settings of this CreateClusterClusterRequestHadoopSettings.  # noqa: E501


        :return: The fairscheduler_settings of this CreateClusterClusterRequestHadoopSettings.  # noqa: E501
        :rtype: CreateClusterClusterRequestFairschedulerSettings
        """
        return self._fairscheduler_settings

    @fairscheduler_settings.setter
    def fairscheduler_settings(self, fairscheduler_settings):
        """Sets the fairscheduler_settings of this CreateClusterClusterRequestHadoopSettings.


        :param fairscheduler_settings: The fairscheduler_settings of this CreateClusterClusterRequestHadoopSettings.  # noqa: E501
        :type: CreateClusterClusterRequestFairschedulerSettings
        """

        self._fairscheduler_settings = fairscheduler_settings

    @property
    def max_nodes(self):
        """Gets the max_nodes of this CreateClusterClusterRequestHadoopSettings.  # noqa: E501


        :return: The max_nodes of this CreateClusterClusterRequestHadoopSettings.  # noqa: E501
        :rtype: float
        """
        return self._max_nodes

    @max_nodes.setter
    def max_nodes(self, max_nodes):
        """Sets the max_nodes of this CreateClusterClusterRequestHadoopSettings.


        :param max_nodes: The max_nodes of this CreateClusterClusterRequestHadoopSettings.  # noqa: E501
        :type: float
        """

        self._max_nodes = max_nodes

    @property
    def use_hadoop2(self):
        """Gets the use_hadoop2 of this CreateClusterClusterRequestHadoopSettings.  # noqa: E501


        :return: The use_hadoop2 of this CreateClusterClusterRequestHadoopSettings.  # noqa: E501
        :rtype: bool
        """
        return self._use_hadoop2

    @use_hadoop2.setter
    def use_hadoop2(self, use_hadoop2):
        """Sets the use_hadoop2 of this CreateClusterClusterRequestHadoopSettings.


        :param use_hadoop2: The use_hadoop2 of this CreateClusterClusterRequestHadoopSettings.  # noqa: E501
        :type: bool
        """

        self._use_hadoop2 = use_hadoop2

    @property
    def use_qubole_placement_policy(self):
        """Gets the use_qubole_placement_policy of this CreateClusterClusterRequestHadoopSettings.  # noqa: E501


        :return: The use_qubole_placement_policy of this CreateClusterClusterRequestHadoopSettings.  # noqa: E501
        :rtype: str
        """
        return self._use_qubole_placement_policy

    @use_qubole_placement_policy.setter
    def use_qubole_placement_policy(self, use_qubole_placement_policy):
        """Sets the use_qubole_placement_policy of this CreateClusterClusterRequestHadoopSettings.


        :param use_qubole_placement_policy: The use_qubole_placement_policy of this CreateClusterClusterRequestHadoopSettings.  # noqa: E501
        :type: str
        """

        self._use_qubole_placement_policy = use_qubole_placement_policy

    @property
    def use_spark(self):
        """Gets the use_spark of this CreateClusterClusterRequestHadoopSettings.  # noqa: E501


        :return: The use_spark of this CreateClusterClusterRequestHadoopSettings.  # noqa: E501
        :rtype: bool
        """
        return self._use_spark

    @use_spark.setter
    def use_spark(self, use_spark):
        """Sets the use_spark of this CreateClusterClusterRequestHadoopSettings.


        :param use_spark: The use_spark of this CreateClusterClusterRequestHadoopSettings.  # noqa: E501
        :type: bool
        """

        self._use_spark = use_spark

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateClusterClusterRequestHadoopSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
