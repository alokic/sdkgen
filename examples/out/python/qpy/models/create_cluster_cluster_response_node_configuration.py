# coding: utf-8

"""
    Qubole API Sepcification

    Operations, requests and responses  # noqa: E501

    OpenAPI spec version: v1.11.0
    Contact: support@qubole.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateClusterClusterResponseNodeConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'initial_nodes': 'float',
        'master_instance_type': 'str',
        'max_nodes': 'float',
        'slave_instance_type': 'str',
        'slave_request_type': 'str',
        'spot_instance_settings': 'CreateClusterClusterResponseSpotInstanceSettings',
        'use_stable_spot_nodes': 'bool'
    }

    attribute_map = {
        'initial_nodes': 'initial_nodes',
        'master_instance_type': 'master_instance_type',
        'max_nodes': 'max_nodes',
        'slave_instance_type': 'slave_instance_type',
        'slave_request_type': 'slave_request_type',
        'spot_instance_settings': 'spot_instance_settings',
        'use_stable_spot_nodes': 'use_stable_spot_nodes'
    }

    def __init__(self, initial_nodes=None, master_instance_type=None, max_nodes=None, slave_instance_type=None, slave_request_type=None, spot_instance_settings=None, use_stable_spot_nodes=None):  # noqa: E501
        """CreateClusterClusterResponseNodeConfiguration - a model defined in OpenAPI"""  # noqa: E501

        self._initial_nodes = None
        self._master_instance_type = None
        self._max_nodes = None
        self._slave_instance_type = None
        self._slave_request_type = None
        self._spot_instance_settings = None
        self._use_stable_spot_nodes = None
        self.discriminator = None

        if initial_nodes is not None:
            self.initial_nodes = initial_nodes
        if master_instance_type is not None:
            self.master_instance_type = master_instance_type
        if max_nodes is not None:
            self.max_nodes = max_nodes
        if slave_instance_type is not None:
            self.slave_instance_type = slave_instance_type
        if slave_request_type is not None:
            self.slave_request_type = slave_request_type
        if spot_instance_settings is not None:
            self.spot_instance_settings = spot_instance_settings
        if use_stable_spot_nodes is not None:
            self.use_stable_spot_nodes = use_stable_spot_nodes

    @property
    def initial_nodes(self):
        """Gets the initial_nodes of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501


        :return: The initial_nodes of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._initial_nodes

    @initial_nodes.setter
    def initial_nodes(self, initial_nodes):
        """Sets the initial_nodes of this CreateClusterClusterResponseNodeConfiguration.


        :param initial_nodes: The initial_nodes of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501
        :type: float
        """

        self._initial_nodes = initial_nodes

    @property
    def master_instance_type(self):
        """Gets the master_instance_type of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501


        :return: The master_instance_type of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._master_instance_type

    @master_instance_type.setter
    def master_instance_type(self, master_instance_type):
        """Sets the master_instance_type of this CreateClusterClusterResponseNodeConfiguration.


        :param master_instance_type: The master_instance_type of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501
        :type: str
        """

        self._master_instance_type = master_instance_type

    @property
    def max_nodes(self):
        """Gets the max_nodes of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501


        :return: The max_nodes of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._max_nodes

    @max_nodes.setter
    def max_nodes(self, max_nodes):
        """Sets the max_nodes of this CreateClusterClusterResponseNodeConfiguration.


        :param max_nodes: The max_nodes of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501
        :type: float
        """

        self._max_nodes = max_nodes

    @property
    def slave_instance_type(self):
        """Gets the slave_instance_type of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501


        :return: The slave_instance_type of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._slave_instance_type

    @slave_instance_type.setter
    def slave_instance_type(self, slave_instance_type):
        """Sets the slave_instance_type of this CreateClusterClusterResponseNodeConfiguration.


        :param slave_instance_type: The slave_instance_type of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501
        :type: str
        """

        self._slave_instance_type = slave_instance_type

    @property
    def slave_request_type(self):
        """Gets the slave_request_type of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501


        :return: The slave_request_type of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._slave_request_type

    @slave_request_type.setter
    def slave_request_type(self, slave_request_type):
        """Sets the slave_request_type of this CreateClusterClusterResponseNodeConfiguration.


        :param slave_request_type: The slave_request_type of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501
        :type: str
        """

        self._slave_request_type = slave_request_type

    @property
    def spot_instance_settings(self):
        """Gets the spot_instance_settings of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501


        :return: The spot_instance_settings of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501
        :rtype: CreateClusterClusterResponseSpotInstanceSettings
        """
        return self._spot_instance_settings

    @spot_instance_settings.setter
    def spot_instance_settings(self, spot_instance_settings):
        """Sets the spot_instance_settings of this CreateClusterClusterResponseNodeConfiguration.


        :param spot_instance_settings: The spot_instance_settings of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501
        :type: CreateClusterClusterResponseSpotInstanceSettings
        """

        self._spot_instance_settings = spot_instance_settings

    @property
    def use_stable_spot_nodes(self):
        """Gets the use_stable_spot_nodes of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501


        :return: The use_stable_spot_nodes of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._use_stable_spot_nodes

    @use_stable_spot_nodes.setter
    def use_stable_spot_nodes(self, use_stable_spot_nodes):
        """Sets the use_stable_spot_nodes of this CreateClusterClusterResponseNodeConfiguration.


        :param use_stable_spot_nodes: The use_stable_spot_nodes of this CreateClusterClusterResponseNodeConfiguration.  # noqa: E501
        :type: bool
        """

        self._use_stable_spot_nodes = use_stable_spot_nodes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateClusterClusterResponseNodeConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
